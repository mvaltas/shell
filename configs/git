# vim: ft=zsh sw=2 ts=2 expandtab

# Enable substitution in the prompt.
setopt PROMPT_SUBST

# Enabling and setting git info var to be used in prompt config.
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git

precmd() {
  readonly cur_branch=$(git branch --show-current 2> /dev/null)

  [[ ${cur_branch} =~ (main|master|trunk) ]] && color="47" || color="184"

  zstyle ':vcs_info:git:*' formats "(%F{${color}}%b%f)"
  vcs_info
}

# This line obtains information from the vcs.
# formats vcs_info_msg_0_
PROMPT='%1/ ${vcs_info_msg_0_}%# '

############
# function shortcuts

# VCS: path to binaries
GIT_BIN=$(whence git)

git-author() {
  args=(${@})
  case ${1} in
    set)
      export GIT_AUTHOR_NAME=${args[@]:1:2}
      ;;
    unset)
      unset GIT_AUTHOR_NAME
      ;;
    show|get)
      echo "Current authors: ${GIT_AUTHOR_NAME:-$(git config --get user.name)}"
      ;;
    *)
      echo "Usage git-author [set AUTHORS|unset|show|get]"
      git-author show
      ;;
  esac
}

# turn debug flags on/off for git commands
git-debug() {
  if [[ ${GIT_SSH_COMMAND} =~ "ssh -v.*" ]]; then
    echo "Disabling git debug"
    unset GIT_TRACE
    unset GIT_TRACE_SETUP
    unset GIT_SSH_COMMAND
  else
    echo "Enabling git debug"
    export GIT_TRACE=true 
    export GIT_TRACE_SETUP=true 
    export GIT_SSH_COMMAND="ssh -v"
  fi
}

# main git shortcut with fn expansion
g() { _expand_last_arg_if_number ${GIT_BIN} "$@"; }
