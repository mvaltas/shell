# vim: ft=zsh sw=2 ts=2 expandtab

# ff (Find File) functions
_track_files() {
  FFOUND_PWD=${PWD}
  FFOUND=()
  while read -r data; do
    FFOUND+=(${data})
  done
  print_found
}

_output_index_to_stdout() {
  # -t 1 checks we are being piped or outputing to stdout
  # we do not output the index if we are being piped
  if [[ -t 1 ]]; then printf "% 4d " $1; fi
}

# if the last arg is a number, try to expand
# to a file in file list (result from ff)
# used in VCS aliases
_expand_last_arg_if_number() {
    ARGS=($@)
    local last_idx=${(@)#ARGS}
    local last_arg=${ARGS[${last_idx}]}

    # last arg is not a number case...
    # execute the command
    if [[ ! $last_arg =~ ^[0-9]+$ ]]; then
        $@
    else
      # get rid of the last argument
      CMD=(${(@)ARGS[1,${last_idx}-1]})

      # call command with last argument replaced as filename
      ${CMD[@]} $(fn ${last_arg})
    fi
}

# grep recursive and honor ff index
_grep_track_files() {
  FFOUND_PWD=${PWD}
  FFOUND=()
  local index=1
  local last_file=""

  while read -r line; do
    file=${${line%%:*}//$'\x1b'\[[0-9]#m]}

    # only add different files to the FFOUND
    # array
    if [[ ${file} != ${last_file} ]]; then
      FFOUND[${index}]=${file}
      last_file=${file}
      ((index++))
    fi

    _output_index_to_stdout $((${index} - 1));
    echo ${line}

  done
}

# print back the found list, remove
# the index if we are piping the results
print_found() {
  local length=${#FFOUND[*]}
  local index=1
  while [ "$index" -le "$length" ]; do
    _output_index_to_stdout $index
    fn $index
    ((index++))
  done
}

# output file path given a index (mnemonic File Number)
# for some aliases if a number if not given return the argument
# back.
fn() {
  if [[ "$1" && "$1" =~ ^[0-9]+$ ]]; then
    item=${FFOUND[$1]}

    # echo nothing if empty
    [[ -z "${item}" ]] && return # echo nothing if empty

    # echo path if current PWD is not the same of when we did
    # the search
    [[ "${PWD}" != "${FFOUND_PWD}" ]] && echo -n ${FFOUND_PWD}/

    # remove control codes (colors) when not on stdout
    # such as "v 1" -> v $(fn 1)
    if [[ -t 1 ]]; then
      echo ${item##${FFOUND_PWD}//}
    else
      echo ${${item##${FFOUND_PWD}//}//$'\x1b'\[[0-9;]#[a-zA-Z]]}
    fi

  elif [ "$1" ]; then
    echo $1
  fi
}

# track files or directories
myfind() {
  _track_files < <(fd --unrestricted --color=always --ignore-case --strip-cwd-prefix --type "${1}" "${2}")
}

# find files shortcuts...
ff()  { myfind "f" "$1"; } # find file
ffd() { myfind "d" "$1"; } # find directory
fl()  { print_found; }     # file list

# greps index shortcuts...
grr() { _grep_track_files < <(rg --no-ignore --color=always ${@}); } 
gr()  { _grep_track_files < <(rg --color=always ${@}); }  

# git index shortcuts
lm() { _track_files < <(git ls-files --modified); }


# these are calls that support file index number
# "v 1" opens in vim the file that has index number 1
# "d 1" goes to the directory where the file is
v() { nvim $(fn "$1");  }
d() {
  if [[ -d $(fn "$1") ]]; then
    cd $(fn "$1")
  else
    cd "$(dirname "$(fn "$1")")";
  fi
}
c() { cat $(fn "$1"); }

# shortcuts for the first found files
fn1() { fn 1; }
fn2() { fn 2; }
fn3() { fn 3; }
fn4() { fn 4; }
fn5() { fn 5; }
fn6() { fn 6; }
